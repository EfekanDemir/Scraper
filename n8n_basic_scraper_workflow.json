{
  "name": "Local Rank Report Scraper - Basic",
  "nodes": [
    {
      "parameters": {
        "url": "={{ $json.url || 'https://www.local-rank.report/scan/97919fde-e478-4081-983f-7e0065b6b5bb' }}",
        "options": {
          "timeout": 30000
        },
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "id": "d4e5f6g7-h8i9-j0k1-l2m3-n4o5p6q7r8s9",
      "name": "HTTP Request - Get HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        740,
        240
      ]
    },
    {
      "parameters": {
        "dataPropertyName": "html_content",
        "extractionValues": {
          "values": [
            {
              "key": "scan_info_table",
              "cssSelector": "div.card-body table",
              "returnValue": "html"
            },
            {
              "key": "rank_summary_table", 
              "cssSelector": "div.card-body table:nth-of-type(2)",
              "returnValue": "html"
            },
            {
              "key": "competitors_table",
              "cssSelector": "div.col-md-12 table",
              "returnValue": "html"
            },
            {
              "key": "sponsored_listings",
              "cssSelector": "div.sponsored-listings",
              "returnValue": "html"
            },
            {
              "key": "all_scripts",
              "cssSelector": "script",
              "returnValue": "html"
            }
          ]
        }
      },
      "id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
      "name": "HTML Extract",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        940,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Scan Information from HTML table\nconst scanInfoHtml = $input.first().json.scan_info_table;\nif (!scanInfoHtml) return [];\n\nconst cheerio = require('cheerio');\nconst $ = cheerio.load(scanInfoHtml);\n\nconst scanInfo = {};\n$('tr').each((i, row) => {\n  const cells = $(row).find('td');\n  if (cells.length >= 2) {\n    const key = $(cells[0]).text().trim().replace(':', '');\n    const value = $(cells[1]).text().trim();\n    scanInfo[key] = value;\n  }\n});\n\nreturn [{ json: { scan_information: scanInfo } }];"
      },
      "id": "b2c3d4e5-f6g7-h8i9-j0k1-l2m3n4o5p6q7",
      "name": "Parse Scan Info",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1140,
        140
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Rank Summary from HTML table\nconst rankSummaryHtml = $input.first().json.rank_summary_table;\nif (!rankSummaryHtml) return [];\n\nconst cheerio = require('cheerio');\nconst $ = cheerio.load(rankSummaryHtml);\n\nconst rankSummary = {};\n$('tr').each((i, row) => {\n  const cells = $(row).find('td');\n  if (cells.length >= 2) {\n    const key = $(cells[0]).text().trim().replace(':', '');\n    const value = $(cells[1]).text().trim();\n    rankSummary[key] = value;\n  }\n});\n\nreturn [{ json: { rank_summary: rankSummary } }];"
      },
      "id": "c3d4e5f6-g7h8-i9j0-k1l2-m3n4o5p6q7r8",
      "name": "Parse Rank Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1140,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Competitors from HTML table\nconst competitorsHtml = $input.first().json.competitors_table;\nif (!competitorsHtml) return [];\n\nconst cheerio = require('cheerio');\nconst $ = cheerio.load(competitorsHtml);\n\nconst competitors = [];\n$('tbody tr').each((i, row) => {\n  const cells = $(row).find('td');\n  if (cells.length >= 3) {\n    const competitor = {\n      rank: $(cells[0]).text().trim(),\n      business_name: $(cells[1]).text().trim(),\n      address: $(cells[2]).text().trim(),\n      phone: cells.length > 3 ? $(cells[3]).text().trim() : 'N/A',\n      website: cells.length > 4 ? $(cells[4]).text().trim() : 'N/A'\n    };\n    competitors.push(competitor);\n  }\n});\n\nreturn [{ json: { competitors: competitors } }];"
      },
      "id": "d4e5f6g7-h8i9-j0k1-l2m3-n4o5p6q7r8s9",
      "name": "Parse Competitors",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1140,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract JavaScript data (pinz array, scan_guid, place_id)\nconst scriptsHtml = $input.first().json.all_scripts;\nif (!scriptsHtml) return [];\n\nconst cheerio = require('cheerio');\nconst $ = cheerio.load(scriptsHtml);\n\nlet jsData = {\n  pinz: [],\n  scan_guid: null,\n  place_id: null\n};\n\n$('script').each((i, script) => {\n  const scriptText = $(script).html() || '';\n  \n  // Extract pinz array\n  const pinzMatch = scriptText.match(/var\\s+pinz\\s*=\\s*(\\[.*?\\]);/s);\n  if (pinzMatch) {\n    try {\n      jsData.pinz = JSON.parse(pinzMatch[1]);\n    } catch (e) {\n      console.log('Error parsing pinz array:', e);\n    }\n  }\n  \n  // Extract scan_guid\n  const scanGuidMatch = scriptText.match(/scan_guid['\"]?\\s*[:=]\\s*['\"]([^'\"]+)['\"]/i);\n  if (scanGuidMatch) {\n    jsData.scan_guid = scanGuidMatch[1];\n  }\n  \n  // Extract place_id\n  const placeIdMatch = scriptText.match(/place_id['\"]?\\s*[:=]\\s*['\"]([^'\"]+)['\"]/i);\n  if (placeIdMatch) {\n    jsData.place_id = placeIdMatch[1];\n  }\n});\n\nreturn [{ json: { javascript_data: jsData } }];"
      },
      "id": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
      "name": "Extract JS Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1140,
        440
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "f6g7h8i9-j0k1-l2m3-n4o5-p6q7r8s9t0u1",
      "name": "Merge Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1340,
        290
      ]
    },
    {
      "parameters": {
        "functionCode": "// Combine all scraped data into final structure\nconst allData = $input.all();\n\nlet combinedData = {\n  ozet_bilgiler: {},\n  rakipler: [],\n  sponsorlu_listeler: [],\n  detayli_sonuclar: [],\n  harita_verileri: [],\n  javascript_verileri: {},\n  metadata: {\n    scraped_at: new Date().toISOString(),\n    scraper_version: '1.0-n8n',\n    method: 'n8n_basic_workflow'\n  }\n};\n\nallData.forEach(item => {\n  const data = item.json;\n  \n  if (data.scan_information) {\n    combinedData.ozet_bilgiler = { ...combinedData.ozet_bilgiler, ...data.scan_information };\n  }\n  \n  if (data.rank_summary) {\n    combinedData.ozet_bilgiler = { ...combinedData.ozet_bilgiler, ...data.rank_summary };\n  }\n  \n  if (data.competitors) {\n    combinedData.rakipler = data.competitors;\n  }\n  \n  if (data.javascript_data) {\n    combinedData.javascript_verileri = data.javascript_data;\n    \n    // Extract map data from pinz array\n    if (data.javascript_data.pinz && Array.isArray(data.javascript_data.pinz)) {\n      combinedData.harita_verileri = data.javascript_data.pinz.map(pin => ({\n        lat: pin.lat,\n        lng: pin.lng,\n        title: pin.title || 'N/A',\n        address: pin.address || 'N/A',\n        url: pin.url || 'N/A'\n      }));\n    }\n  }\n});\n\nreturn [{ json: combinedData }];"
      },
      "id": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
      "name": "Combine Final Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1540,
        290
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ 'scraped_data_' + $now.format('YYYY-MM-DD_HH-mm-ss') + '.json' }}",
        "fileContent": "={{ JSON.stringify($json, null, 2) }}",
        "options": {}
      },
      "id": "h8i9j0k1-l2m3-n4o5-p6q7-r8s9t0u1v2w3",
      "name": "Save to JSON",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1740,
        290
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "url",
              "value": "https://www.local-rank.report/scan/97919fde-e478-4081-983f-7e0065b6b5bb"
            }
          ]
        },
        "options": {}
      },
      "id": "i9j0k1l2-m3n4-o5p6-q7r8-s9t0u1v2w3x4",
      "name": "Start - Input URL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        540,
        240
      ]
    }
  ],
  "connections": {
    "HTTP Request - Get HTML": {
      "main": [
        [
          {
            "node": "HTML Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract": {
      "main": [
        [
          {
            "node": "Parse Scan Info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Rank Summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Competitors",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract JS Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Scan Info": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Rank Summary": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Parse Competitors": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Extract JS Data": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Combine Final Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Final Data": {
      "main": [
        [
          {
            "node": "Save to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start - Input URL": {
      "main": [
        [
          {
            "node": "HTTP Request - Get HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-20T12:00:00.000Z",
  "versionId": "1"
}