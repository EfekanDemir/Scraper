#!/bin/bash

# N8N JSON Import Helper Script
# Bu script JSON dosyalarƒ±nƒ± n8n'e import etmenize yardƒ±mcƒ± olur

echo "üöÄ N8N JSON Import Helper"
echo "=========================="

# Renk kodlarƒ±
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonksiyonlar
check_n8n_running() {
    echo -e "${BLUE}N8N durumu kontrol ediliyor...${NC}"
    if curl -s http://localhost:5678 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ N8N √ßalƒ±≈üƒ±yor (http://localhost:5678)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå N8N √ßalƒ±≈ümƒ±yor veya eri≈üilemiyor${NC}"
        echo -e "${YELLOW}N8N'i ba≈ülatmak i√ßin: npx n8n start${NC}"
        return 1
    fi
}

validate_json() {
    local file=$1
    echo -e "${BLUE}JSON dosyasƒ± validasyonu: $file${NC}"
    
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Dosya bulunamadƒ±: $file${NC}"
        return 1
    fi
    
    if command -v jq &> /dev/null; then
        if jq . "$file" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ JSON valid: $file${NC}"
            return 0
        else
            echo -e "${RED}‚ùå JSON invalid: $file${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  jq bulunamadƒ±, JSON validasyonu atlanƒ±yor${NC}"
        return 0
    fi
}

list_json_files() {
    echo -e "${BLUE}Mevcut JSON dosyalarƒ±:${NC}"
    echo "========================"
    
    local count=1
    for file in *.json; do
        if [ -f "$file" ]; then
            local size=$(ls -lh "$file" | awk '{print $5}')
            local lines=$(wc -l < "$file")
            
            if [[ "$file" == *"workflow"* ]]; then
                echo -e "${GREEN}$count. $file ${NC}(${size}, ${lines} lines) ${YELLOW}[WORKFLOW]${NC}"
            else
                echo -e "${BLUE}$count. $file ${NC}(${size}, ${lines} lines) ${YELLOW}[DATA]${NC}"
            fi
            
            ((count++))
        fi
    done
}

import_workflow() {
    local file=$1
    echo -e "${BLUE}Workflow import ba≈ülatƒ±lƒ±yor: $file${NC}"
    
    # JSON'dan workflow adƒ±nƒ± √ßƒ±kar
    if command -v jq &> /dev/null; then
        local workflow_name=$(jq -r '.name // "Unknown Workflow"' "$file")
        echo -e "${YELLOW}Workflow Adƒ±: $workflow_name${NC}"
    fi
    
    echo -e "${YELLOW}Manuel Import Adƒ±mlarƒ±:${NC}"
    echo "1. N8N aray√ºz√ºn√º a√ßƒ±n: http://localhost:5678"
    echo "2. '+' butonuna tƒ±klayƒ±n (yeni workflow)"
    echo "3. Saƒü √ºst '‚ãØ' men√ºs√ºnden 'Import from file' se√ßin"
    echo "4. Dosyayƒ± se√ßin: $file"
    echo "5. 'Activate' butonuna tƒ±klayƒ±n"
    
    # Curl ile otomatik import dene (eƒüer API endpoint varsa)
    echo -e "\n${BLUE}Otomatik import deneniyor...${NC}"
    
    local response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d @"$file" \
        http://localhost:5678/rest/workflows 2>/dev/null)
    
    if [ $? -eq 0 ] && [[ "$response" == *"id"* ]]; then
        echo -e "${GREEN}‚úÖ Workflow ba≈üarƒ±yla import edildi!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Otomatik import ba≈üarƒ±sƒ±z, manuel import kullanƒ±n${NC}"
    fi
}

process_data_file() {
    local file=$1
    echo -e "${BLUE}Veri dosyasƒ± i≈üleniyor: $file${NC}"
    
    # Dosya t√ºr√ºn√º belirle
    if grep -q "ozet_bilgiler" "$file"; then
        echo -e "${GREEN}üìä Scraping data dosyasƒ± tespit edildi${NC}"
        
        # √ñzet bilgileri g√∂ster
        if command -v jq &> /dev/null; then
            echo -e "\n${YELLOW}√ñzet Bilgiler:${NC}"
            jq -r '.ozet_bilgiler | to_entries[] | "\(.key): \(.value)"' "$file" | head -5
            
            echo -e "\n${YELLOW}Rakip Sayƒ±sƒ±:${NC}"
            local rakip_count=$(jq '.rakipler | length' "$file")
            echo "$rakip_count rakip"
        fi
        
        echo -e "\n${YELLOW}Bu veriyi N8N'de kullanmak i√ßin:${NC}"
        echo "1. N8N workflow'unuzda Code node ekleyin"
        echo "2. ≈ûu kodu kullanƒ±n:"
        echo ""
        echo "const fs = require('fs');"
        echo "const data = JSON.parse(fs.readFileSync('$PWD/$file', 'utf8'));"
        echo "return { json: data };"
    else
        echo -e "${BLUE}üìÑ Genel JSON veri dosyasƒ±${NC}"
    fi
}

send_to_webhook() {
    local file=$1
    local webhook_url
    
    echo -e "${BLUE}Webhook URL'ini girin (√∂rnek: http://localhost:5678/webhook/test):${NC}"
    read -r webhook_url
    
    if [[ -z "$webhook_url" ]]; then
        echo -e "${RED}‚ùå Webhook URL bo≈ü olamaz${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Veri webhook'a g√∂nderiliyor...${NC}"
    
    local response=$(curl -s -w "%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -d @"$file" \
        "$webhook_url")
    
    local http_code="${response: -3}"
    local body="${response%???}"
    
    if [[ "$http_code" == "200" ]] || [[ "$http_code" == "201" ]]; then
        echo -e "${GREEN}‚úÖ Veri ba≈üarƒ±yla g√∂nderildi! (HTTP $http_code)${NC}"
        if [[ -n "$body" ]] && [[ "$body" != *"html"* ]]; then
            echo -e "${YELLOW}Response: ${body:0:200}...${NC}"
        fi
    else
        echo -e "${RED}‚ùå Hata: HTTP $http_code${NC}"
        echo -e "${RED}Response: ${body:0:200}${NC}"
    fi
}

# Ana men√º
show_menu() {
    echo -e "\n${BLUE}Ne yapmak istiyorsunuz?${NC}"
    echo "1. JSON dosyalarƒ±nƒ± listele"
    echo "2. Workflow dosyasƒ± import et"
    echo "3. Veri dosyasƒ±nƒ± analiz et"
    echo "4. Veri dosyasƒ±nƒ± webhook'a g√∂nder"
    echo "5. N8N durumunu kontrol et"
    echo "6. T√ºm JSON dosyalarƒ±nƒ± valide et"
    echo "0. √áƒ±kƒ±≈ü"
    echo -e "\n${YELLOW}Se√ßiminizi yapƒ±n [0-6]:${NC}"
}

# Ana d√∂ng√º
main() {
    echo -e "${GREEN}Workspace: $PWD${NC}"
    
    while true; do
        show_menu
        read -r choice
        
        case $choice in
            1)
                list_json_files
                ;;
            2)
                echo -e "${BLUE}Workflow dosyasƒ±nƒ± se√ßin:${NC}"
                select file in *workflow*.json; do
                    if [[ -n "$file" ]]; then
                        if validate_json "$file"; then
                            import_workflow "$file"
                        fi
                        break
                    fi
                done
                ;;
            3)
                echo -e "${BLUE}Analiz edilecek veri dosyasƒ±nƒ± se√ßin:${NC}"
                select file in *.json; do
                    if [[ -n "$file" ]] && [[ "$file" != *"workflow"* ]]; then
                        if validate_json "$file"; then
                            process_data_file "$file"
                        fi
                        break
                    elif [[ "$file" == *"workflow"* ]]; then
                        echo -e "${YELLOW}Bu bir workflow dosyasƒ±. Veri dosyasƒ± se√ßin.${NC}"
                    fi
                done
                ;;
            4)
                echo -e "${BLUE}Webhook'a g√∂nderilecek dosyayƒ± se√ßin:${NC}"
                select file in *.json; do
                    if [[ -n "$file" ]] && [[ "$file" != *"workflow"* ]]; then
                        if validate_json "$file"; then
                            send_to_webhook "$file"
                        fi
                        break
                    fi
                done
                ;;
            5)
                check_n8n_running
                ;;
            6)
                echo -e "${BLUE}T√ºm JSON dosyalarƒ± valide ediliyor...${NC}"
                for file in *.json; do
                    if [ -f "$file" ]; then
                        validate_json "$file"
                    fi
                done
                ;;
            0)
                echo -e "${GREEN}üëã G√∂r√º≈ü√ºr√ºz!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Ge√ßersiz se√ßim. L√ºtfen 0-6 arasƒ± bir sayƒ± girin.${NC}"
                ;;
        esac
        
        echo -e "\n${YELLOW}Devam etmek i√ßin Enter'a basƒ±n...${NC}"
        read -r
    done
}

# Script ba≈ülat
main